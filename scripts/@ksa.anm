@透明度グラデーション
--track0:中心X,-1000,1000,0,1
--track1:中心Y,-1000,1000,0,1
--track2:角度,-360,360,0
--track3:幅,0,1000,100,1
--dialog:開始透明度,local s_tp=0;終了透明度,local e_tp=100;

local ksa = require("ksa")

local s_alp = (1-s_tp/100)
local e_alp = (1-e_tp/100)
local angle = math.rad( obj.track2 )

local data, w, h = obj.getpixeldata()
ksa.trsgrad(data, w, h, obj.track0+obj.cx+w/2, obj.track1+obj.cy+h/2, angle, obj.track3, s_alp, e_alp)
obj.putpixeldata(data)

@回転
--track0:回転量,0,100,6,1
--track1:縦回転,0,1,0,1
--track2:反転,0,1,0,1

local ksa = require("ksa")

local angle = math.pi*obj.track0*obj.frame/obj.totalframe
if ( obj.track2 == 1 ) then
	angle = -angle
end
local x0, x1, y0, y1
if ( obj.track1 == 0 ) then
	local dw = obj.w*math.sin(angle)
	x0 = -dw/2
	x1 = dw/2
	y0 = -obj.h/2
	y1 = obj.h/2
else
	local dh = obj.h*math.sin(angle)
	x0 = -obj.w/2
	x1 = obj.w/2
	y0 = -dh/2
	y1 = dh/2
end

ksa.drawrect(x0, y0, x1, y1)

@Lanczos3リサイズ
--track0:拡大率,0,800,100,0.01
--track1:X,0,800,100,0.01
--track2:Y,0,800,100,0.01
--check0:ドット数でサイズ指定,0
--dialog:スレッド数,local n_th=-1;上,local ct=0;下,local cb=0;左,local cl=0;右,local cr=0;

local ksa = require("ksa")
local src, sw, sh = obj.getpixeldata("alloc")
local dw, dh
if ( obj.check0 ) then
	dw = ksa.round(obj.track1)
	dh = ksa.round(obj.track2)
else
	dw = ksa.round( ( sw-(cl+cr) )*obj.track0*obj.track1*1e-4 )
	dh = ksa.round( ( sh-(ct+cb) )*obj.track0*obj.track2*1e-4 )
end
if ( ( cl+cr < sw ) and ( ct+cb < sh ) ) then
	obj.setoption("drawtarget", "tempbuffer", dw, dh)
	obj.copybuffer("obj", "tmp")
	local dest, dw, dh = obj.getpixeldata()
	ksa.clip_resize(src, sw, sh, dest, dw, dh, ct, cb, cl, cr, n_th)
	obj.putpixeldata(dest)
end

@クリッピング&倍角化
--track0:上,0,2000,0,1
--track1:下,0,2000,0,1
--track2:左,0,2000,0,1
--track3:右,0,2000,0,1
--dialog:スレッド数,local n_th=-1;
local ct, cb, cl, cr = obj.track0, obj.track1, obj.track2, obj.track3

local ksa = require("ksa")
local src, sw, sh = obj.getpixeldata("alloc")
if ( ( cl+cr < sw ) and ( ct+cb < sh ) ) then
	obj.setoption("drawtarget", "tempbuffer", (sw-cl-cr)*2, (sh-ct-cb)*2)
	obj.copybuffer("obj", "tmp")
	local dest, dw, dh = obj.getpixeldata()
	ksa.clip_double(src, sw, sh, dest, ct, cb, cl, cr, n_th)
	obj.putpixeldata(dest)
end
